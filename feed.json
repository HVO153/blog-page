{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hai&#x27;s Web",
    "description": "",
    "home_page_url": "https://hvo153.github.io/blog-page",
    "feed_url": "https://hvo153.github.io/blog-page/feed.json",
    "user_comment": "",
    "icon": "https://hvo153.github.io/blog-page/media/website/reindeer-1.png",
    "author": {
        "name": "Võ Hồng Hải"
    },
    "items": [
        {
            "id": "https://hvo153.github.io/blog-page/cac-thanh-phan-trong-java.html",
            "url": "https://hvo153.github.io/blog-page/cac-thanh-phan-trong-java.html",
            "title": "Các thành phần trong Java",
            "summary": "1. Các Thành Phần Cơ Bản Biến (Variable) Biến là nơi lưu trữ dữ liệu. public class VariableExample { int instanceVar = 10; // Biến instance static int staticVar = 20; // Biến static public static void main(String[] args) { int localVar = 30; //&hellip;",
            "content_html": "<h2><strong><br>1. Các Thành Phần Cơ Bản</strong></h2>\n<h3><strong>Biến (Variable)</strong></h3>\n<p>Biến là nơi lưu trữ dữ liệu.</p>\n<ul>\n<li><strong>Biến cục bộ</strong>: Chỉ được sử dụng trong một phương thức hoặc khối mã.</li>\n<li><strong>Biến instance</strong>: Thuộc về một đối tượng, không cần từ khóa <code>static</code>.</li>\n<li><strong>Biến static</strong>: Thuộc về lớp (class) thay vì đối tượng cụ thể.</li>\n</ul>\n<h4>Ví dụ:</h4>\n<blockquote>\n<p>public class VariableExample {<br>    int instanceVar = 10; // Biến instance<br>    static int staticVar = 20; // Biến static<br><br>    public static void main(String[] args) {<br>        int localVar = 30; // Biến cục bộ<br>        System.out.println(\"Static Variable: \" + staticVar);<br>        System.out.println(\"Local Variable: \" + localVar);<br>    }<br>}</p>\n</blockquote>\n<h3><strong>Kiểu Dữ Liệu (Data Type)</strong></h3>\n<p>Java hỗ trợ:</p>\n<ol>\n<li><strong>Kiểu nguyên thủy</strong> (Primitive): <code>int</code>, <code>float</code>, <code>char</code>, <code>boolean</code>,...</li>\n<li><strong>Kiểu không nguyên thủy</strong> (Non-Primitive): <code>String</code>, <code>Array</code>, <code>Class</code>,...</li>\n</ol>\n<h4>Ví dụ:</h4>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div class=\"flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none\"> </div>\n<blockquote>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\">int age = 25;        // Kiểu nguyên thủy<br>String name = \"Java\"; // Kiểu không nguyên thủy</div>\n</blockquote>\n</div>\n<h3><strong>Toán Tử (Operators)</strong></h3>\n<p>Các toán tử giúp thực hiện các phép tính hoặc thao tác trên dữ liệu.</p>\n<ul>\n<li><strong>Số học</strong>: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></li>\n<li><strong>So sánh</strong>: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code></li>\n<li><strong>Logic</strong>: <code>&amp;&amp;</code>, <code>||</code>, <code>!</code></li>\n<li><strong>Gán</strong>: <code>=</code>, <code>+=</code>, <code>-=</code>,...</li>\n</ul>\n<h4>Ví dụ:</h4>\n<blockquote>\n<p>int a = 5, b = 10;<br>int sum = a + b; // Số học<br>boolean isEqual = (a == b); // So sánh</p>\n</blockquote>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div class=\"flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none\"> </div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code class=\"!whitespace-pre hljs language-java\"></code></div>\n</div>\n<h2>2. <strong>Cấu Trúc Điều Khiển</strong></h2>\n<h3><strong>Cấu Trúc Điều Kiện</strong></h3>\n<p>Giúp thực hiện hành động dựa trên điều kiện.</p>\n<ul>\n<li><strong>if-else</strong>: Xử lý các tình huống đơn giản.</li>\n<li><strong>switch-case</strong>: Xử lý các tình huống có nhiều giá trị cụ thể.</li>\n</ul>\n<h4>Ví dụ:</h4>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div class=\"flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none\"> </div>\n<blockquote>\n<div>int number = 5;<br>if (number % 2 == 0) {<br>    System.out.println(\"Số chẵn\");<br>} else {<br>    System.out.println(\"Số lẻ\");<br>}<br><br>switch (number) {<br>    case 5:<br>        System.out.println(\"Number is 5\");<br>        break;<br>    default:<br>        System.out.println(\"Unknown number\");<br>}</div>\n</blockquote>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"> </div>\n</div>\n<h3><strong>Vòng Lặp</strong></h3>\n<p>Giúp lặp lại các thao tác.</p>\n<ul>\n<li><strong>for</strong>: Sử dụng khi biết số lần lặp.</li>\n<li><strong>while</strong> và <strong>do-while</strong>: Sử dụng khi điều kiện xác định việc lặp.</li>\n</ul>\n<h4>Ví dụ:</h4>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div class=\"flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none\"> </div>\n<blockquote>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\">for (int i = 1; i &lt;= 5; i++) {<br>    System.out.println(\"Count: \" + i);<br>}<br><br>int j = 1;<br>while (j &lt;= 5) {<br>    System.out.println(\"Count: \" + j);<br>    j++;<br>}</div>\n</blockquote>\n</div>\n<h2><strong>3. Các Thành Phần trong Hướng Đối Tượng (OOP)</strong></h2>\n<h3><strong>Lớp và Đối Tượng (Class &amp; Object)</strong></h3>\n<ul>\n<li><strong>Lớp</strong>: Là một bản thiết kế cho đối tượng.</li>\n<li><strong>Đối tượng</strong>: Là thể hiện của lớp, chứa dữ liệu và các phương thức.</li>\n</ul>\n<h4>Ví dụ:</h4>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div class=\"flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none\"> </div>\n<blockquote>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\">class Animal {<br>    String name;<br><br>    void sound() {<br>        System.out.println(name + \" tạo âm thanh.\");<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        Animal dog = new Animal(); // Tạo đối tượng<br>        dog.name = \"Chó\";<br>        dog.sound();<br>    }<br>}</div>\n</blockquote>\n</div>\n<h3><strong>Tính Đóng Gói (Encapsulation)</strong></h3>\n<p>Bảo vệ dữ liệu bằng cách sử dụng các phương thức <code>getter</code> và <code>setter</code>.</p>\n<h4>Ví dụ:</h4>\n<p> </p>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<blockquote>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\">class Employee {<br>    private String name;<br><br>    public String getName() {<br>        return name;<br>    }<br><br>    public void setName(String name) {<br>        this.name = name;<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        Employee emp = new Employee();<br>        emp.setName(\"John\");<br>        System.out.println(emp.getName());<br>    }<br>}</div>\n</blockquote>\n</div>\n<h3><strong>Tính Kế Thừa (Inheritance)</strong></h3>\n<p>Giúp một lớp kế thừa các thuộc tính và phương thức của lớp khác.</p>\n<h4>Ví dụ:</h4>\n<blockquote>\n<p>class Animal {<br>    void eat() {<br>        System.out.println(\"Animal is eating\");<br>    }<br>}<br><br>class Dog extends Animal {<br>    void bark() {<br>        System.out.println(\"Dog is barking\");<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        Dog dog = new Dog();<br>        dog.eat(); // Kế thừa từ lớp Animal<br>        dog.bark();<br>    }<br>}</p>\n</blockquote>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div class=\"flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none\"> </div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code class=\"!whitespace-pre hljs language-java\"></code></div>\n</div>\n<h3><strong>Tính Đa Hình (Polymorphism)</strong></h3>\n<p>Giúp phương thức cùng tên hoạt động khác nhau dựa trên ngữ cảnh.</p>\n<h4>Ví dụ:</h4>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div class=\"flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none\"> </div>\n<blockquote>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\">class Animal {<br>    void sound() {<br>        System.out.println(\"Animal makes sound\");<br>    }<br>}<br><br>class Dog extends Animal {<br>    @Override<br>    void sound() {<br>        System.out.println(\"Dog barks\");<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        Animal animal = new Dog(); // Đa hình<br>        animal.sound();<br>    }<br>}</div>\n</blockquote>\n</div>\n<h2><strong>4. Quản Lý Lỗi và Ngoại Lệ (Exception Handling)</strong></h2>\n<h3><strong>Try-Catch</strong></h3>\n<p>Sử dụng để xử lý lỗi trong runtime.</p>\n<h4>Ví dụ:</h4>\n<blockquote>\n<p>public class Main {<br>    public static void main(String[] args) {<br>        try {<br>            int result = 10 / 0;<br>        } catch (ArithmeticException e) {<br>            System.out.println(\"Không thể chia cho 0: \" + e.getMessage());<br>        } finally {<br>            System.out.println(\"Hoàn thành xử lý lỗi.\");<br>        }<br>    }<br>}</p>\n</blockquote>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"><code class=\"!whitespace-pre hljs language-java\"></code></div>\n</div>",
            "image": "https://hvo153.github.io/blog-page/media/posts/14/JAVA.webp",
            "author": {
                "name": "Võ Hồng Hải"
            },
            "tags": [
                   "BLOGS"
            ],
            "date_published": "2024-12-30T18:42:50+07:00",
            "date_modified": "2024-12-31T20:38:32+07:00"
        },
        {
            "id": "https://hvo153.github.io/blog-page/gioi-thieu-ve-java.html",
            "url": "https://hvo153.github.io/blog-page/gioi-thieu-ve-java.html",
            "title": "Giới thiệu về Java",
            "summary": "Java là ngôn ngữ lập trình đa nền tảng (cross-platform), được phát triển bởi James Gosling tại Sun Microsystems (nay là Oracle Corporation). Ngôn ngữ lập trình này ra đời vào năm 1995 và được thiết kế để có thể chạy trên các nền tảng khác&hellip;",
            "content_html": "<p>Java là ngôn ngữ lập trình đa nền tảng (cross-platform), được phát triển bởi James Gosling tại Sun Microsystems (nay là Oracle Corporation). Ngôn ngữ lập trình này ra đời vào năm 1995 và được thiết kế để có thể chạy trên các nền tảng khác nhau, từ máy tính cá nhân đến thiết bị di động, các máy chủ và thiết bị nhúng.</p>\n<p>Java sử dụng cấu trúc lập trình hướng đối tượng (object-oriented programming - OOP) và được xây dựng trên cơ sở của ngôn ngữ lập trình C++. Nó cung cấp một môi trường chạy ảo (virtual machine) gọi là Java Virtual Machine (JVM), giúp các chương trình Java có thể chạy trên nhiều nền tảng khác nhau mà không cần phải biên dịch lại.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://hvo153.github.io/blog-page/media/posts/13/4.jpg\" alt=\"\" width=\"1200\" height=\"800\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://hvo153.github.io/blog-page/media/posts/13/responsive/4-xs.jpg 300w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/4-sm.jpg 480w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/4-md.jpg 768w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/4-lg.jpg 1024w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/4-xl.jpg 1360w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/4-2xl.jpg 1600w\"></figure>\n<p class=\"msg msg--highlight \">Hiện tại, Java là một trong những ngôn ngữ lập trình phổ biến nhất hiện nay, được sử dụng rộng rãi trong các ứng dụng di động, phát triển web, lập trình trên các thiết bị nhúng, máy tính cá nhân, máy chủ, game và nhiều lĩnh vực khác.</p>\n<h2 id=\"article-detail-1\"><strong>Các tính năng của Java</strong></h2>\n<h3><strong>Đa nền tảng</strong></h3>\n<p>Java được thiết kế để có thể chạy trên nhiều nền tảng khác nhau, vì vậy nó rất phù hợp cho việc phát triển các ứng dụng đa nền tảng. Java sử dụng một máy ảo (JVM - Java Virtual Machine) để chạy mã nguồn, vì vậy mã nguồn được viết một lần và có thể chạy trên nhiều hệ điều hành khác nhau mà không cần thay đổi.</p>\n<h3><strong>Quản lý bộ nhớ tự động</strong></h3>\n<p>Java có tính năng tự động quản lý bộ nhớ, tức là nó tự động thu dọn các vùng nhớ không sử dụng nữa để giảm thiểu các lỗi bộ nhớ. Điều này giúp cho các ứng dụng được viết bằng Java có thể chạy ổn định và tránh các lỗi liên quan đến bộ nhớ.</p>\n<h3><strong>Hỗ trợ đa luồng</strong></h3>\n<p>Java có thể xử lý đa luồng, cho phép chương trình thực hiện nhiều tác vụ cùng một lúc. Điều này giúp cho các ứng dụng có thể chạy nhanh và hiệu quả hơn, đặc biệt là khi phải xử lý nhiều tác vụ cùng một lúc.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://hvo153.github.io/blog-page/media/posts/13/10.jpg\" alt=\"\" width=\"1200\" height=\"600\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://hvo153.github.io/blog-page/media/posts/13/responsive/10-xs.jpg 300w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/10-sm.jpg 480w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/10-md.jpg 768w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/10-lg.jpg 1024w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/10-xl.jpg 1360w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/10-2xl.jpg 1600w\"></figure>\n<h3><strong>Tính bảo mật cao</strong></h3>\n<p>Java có các tính năng bảo mật như kiểm tra kiểu tĩnh và kiểm tra lỗi trên đường dẫn. Java được thiết kế để giảm thiểu các lỗ hổng bảo mật và các vấn đề liên quan đến an ninh.</p>\n<h3><strong>Hỗ trợ các thư viện và công cụ phát triển mạnh mẽ</strong></h3>\n<p>Java có các thư viện tiêu chuẩn và các công cụ phát triển như IDE (Integrated Development Environment) để giúp các nhà phát triển tạo ra các ứng dụng dễ dàng hơn. Các thư viện và công cụ này cung cấp các tính năng như: tạo giao diện người dùng, xử lý dữ liệu, kết nối cơ sở dữ liệu và nhiều hơn nữa,...</p>\n<h3><strong>Tính di động</strong></h3>\n<p>Java được sử dụng rộng rãi trong lĩnh vực di động bao gồm: các thư viện hỗ trợ việc phát triển ứng dụng di động, đóng gói ứng dụng thành các file .jar hoặc .apk, cung cấp các tính năng như xử lý đa nhiệm, kết nối mạng và tích hợp với các thiết bị phần cứng như máy ảnh.</p>\n<h3><strong>Tính độc lập với nền tảng</strong></h3>\n<p>Java có thể chạy trên nhiều nền tảng khác nhau và không phụ thuộc vào bất kỳ nền tảng cụ thể nào. Điều này giúp cho các ứng dụng Java có thể được triển khai trên nhiều hệ thống khác nhau mà không cần sửa đổi mã nguồn.</p>\n<h3><strong>Tính kế thừa và đa hình</strong></h3>\n<p>Java là ngôn ngữ lập trình hướng đối tượng (OOP), vì vậy nó có các tính năng như kế thừa, đa hình và đóng gói. Các tính năng này giúp cho mã nguồn được tái sử dụng và giảm thiểu sự trùng lặp trong mã nguồn.</p>\n<h3><strong>Tính mở rộng</strong></h3>\n<p>Java có tính năng mở rộng, cho phép các nhà phát triển thêm các tính năng mới vào ngôn ngữ bằng cách tạo các thư viện và API riêng. Điều này giúp cho Java có thể được sử dụng trong nhiều lĩnh vực khác nhau và được phát triển theo các hướng khác nhau.</p>\n<h2 id=\"article-detail-2\"><strong>Ưu &amp; nhược điểm của Java</strong></h2>\n<h3><strong>Ưu điểm của Java</strong></h3>\n<ul>\n<li>Độ tin cậy cao</li>\n<li>Tính đa nền tảng</li>\n<li>Quản lý bộ nhớ tự động</li>\n<li>Công cụ phát triển phong phú</li>\n<li>Hỗ trợ đa luồng</li>\n</ul>\n<p> </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://hvo153.github.io/blog-page/media/posts/13/14-3.png\" alt=\"\" width=\"1600\" height=\"898\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://hvo153.github.io/blog-page/media/posts/13/responsive/14-3-xs.png 300w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/14-3-sm.png 480w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/14-3-md.png 768w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/14-3-lg.png 1024w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/14-3-xl.png 1360w ,https://hvo153.github.io/blog-page/media/posts/13/responsive/14-3-2xl.png 1600w\"></figure>\n<p> </p>\n<h3><strong>Nhược điểm của Java</strong></h3>\n<ul>\n<li>Tốc độ chậm hơn so với các ngôn ngữ lập trình gần sát với phần cứng, chẳng hạn như C hoặc C++.</li>\n<li>Java có thể chạy trên nhiều nền tảng khác nhau, nhưng ứng dụng này có thể cần đến một trình biên dịch hoặc máy ảo Java riêng biệt để có thể chạy trên các thiết bị di động.</li>\n<li>Sử dụng bộ nhớ lớn hơn so với một số ngôn ngữ lập trình khác.</li>\n<li>Cú pháp phức tạp hơn so với một số ngôn ngữ lập trình khác</li>\n</ul>",
            "image": "https://hvo153.github.io/blog-page/media/posts/13/42.jpg",
            "author": {
                "name": "Võ Hồng Hải"
            },
            "tags": [
                   "BLOGS"
            ],
            "date_published": "2024-12-30T18:30:12+07:00",
            "date_modified": "2024-12-30T18:30:12+07:00"
        },
        {
            "id": "https://hvo153.github.io/blog-page/error-va-exception.html",
            "url": "https://hvo153.github.io/blog-page/error-va-exception.html",
            "title": "Error và Exception",
            "summary": "Trong quá trình phát triển ứng dụng, Error và Exception là những vấn đề không thể tránh khỏi. Hiểu cách xử lý chúng là chìa khóa để đảm bảo ứng dụng hoạt động ổn định và thân thiện với người dùng. JavaScript cung cấp cơ&hellip;",
            "content_html": "<p class=\"msg msg--highlight \">Trong quá trình phát triển ứng dụng, <strong>Error</strong> và <strong>Exception</strong> là những vấn đề không thể tránh khỏi. Hiểu cách xử lý chúng là chìa khóa để đảm bảo ứng dụng hoạt động ổn định và thân thiện với người dùng. JavaScript cung cấp cơ chế mạnh mẽ để bắt lỗi và xử lý ngoại lệ, giúp kiểm soát luồng chương trình và giảm thiểu rủi ro.</p>\n<h4>1. <strong>Phân loại lỗi trong JavaScript</strong></h4>\n<ul>\n<li><strong>Lỗi cú pháp (Syntax Error)</strong>: Xảy ra khi code có lỗi về ngữ pháp, ví dụ như thiếu dấu ngoặc hoặc khai báo sai cú pháp. Những lỗi này thường xuất hiện trong quá trình biên dịch.</li>\n<li><strong>Lỗi runtime (Runtime Error)</strong>: Xảy ra trong khi chương trình đang chạy, ví dụ như truy cập thuộc tính của <code>undefined</code>.</li>\n<li><strong>Lỗi logic (Logical Error)</strong>: Code chạy mà không gặp lỗi kỹ thuật, nhưng kết quả không đúng như mong đợi. Đây là lỗi khó phát hiện và cần kiểm tra cẩn thận.</li>\n</ul>\n<hr>\n<h4>2. <strong>Cơ chế xử lý lỗi với <code>try-catch</code></strong></h4>\n<ul>\n<li>Tôi sử dụng <code>try-catch</code> để xử lý các lỗi runtime và đảm bảo ứng dụng không bị dừng đột ngột.</li>\n<li>Phần <code>try</code> chứa code có thể gây lỗi, trong khi phần <code>catch</code> xử lý lỗi đó.</li>\n<li>Đôi khi tôi thêm <code>finally</code> để đảm bảo thực hiện một số hành động nhất định, bất kể lỗi xảy ra hay không (ví dụ: đóng kết nối).</li>\n</ul>\n<h4>3. <strong>Tạo và ném lỗi tùy chỉnh (Custom Errors)</strong></h4>\n<ul>\n<li>Khi cần xử lý các lỗi cụ thể, tôi thường tạo lỗi tùy chỉnh bằng cách sử dụng từ khóa <code>throw</code>. Điều này giúp việc debug và quản lý lỗi trở nên rõ ràng hơn.</li>\n</ul>\n<h4>4. <strong>Quản lý lỗi bất đồng bộ (Asynchronous Error)</strong></h4>\n<ul>\n<li>Với các tác vụ bất đồng bộ (async), tôi sử dụng <code>try-catch</code> kết hợp với <code>async-await</code> để bắt lỗi. Trong trường hợp dùng <code>Promise</code>, tôi dùng <code>.catch()</code> để xử lý.</li>\n</ul>\n<h4>5. <strong>Logging và Debugging</strong></h4>\n<ul>\n<li>Ghi log lỗi vào console hoặc gửi về server là cách tôi thường dùng để theo dõi các vấn đề phát sinh trên môi trường thực tế.</li>\n</ul>\n<h3>Ví dụ minh họa</h3>\n<h4>1. <strong>Cơ bản: Sử dụng <code>try-catch</code></strong></h4>\n<p>try {<br>    let result = 10 / 0; // Không gây lỗi trong JS, nhưng có thể xử lý logic<br>    console.log(result);<br><br>    let obj = null;<br>    console.log(obj.name); // Lỗi: Cannot read properties of null<br>} catch (error) {<br>    console.error(\"Có lỗi xảy ra:\", error.message); // Xử lý lỗi<br>} finally {<br>    console.log(\"Hoàn thành xử lý\");<br>}</p>\n<h4>2. <strong>Tạo lỗi tùy chỉnh bằng <code>throw</code></strong></h4>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div class=\"flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none\"> </div>\n<div>function validateAge(age) {<br>    if (age &lt; 18) {<br>        throw new Error(\"Tuổi phải từ 18 trở lên\");<br>    }<br>    return \"Tuổi hợp lệ!\";<br>}<br><br>try {<br>    console.log(validateAge(16)); // Gây lỗi<br>} catch (error) {<br>    console.error(\"Lỗi xác thực:\", error.message);<br>}</div>\n<div> </div>\n<h4>3. <strong>Quản lý lỗi bất đồng bộ với <code>async-await</code></strong></h4>\n<div> </div>\n<div>async function fetchData() {<br>    try {<br>        let response = await fetch(\"https://api.example.com/data\");<br>        if (!response.ok) {<br>            throw new Error(`HTTP lỗi: ${response.status}`);<br>        }<br>        let data = await response.json();<br>        console.log(\"Dữ liệu nhận được:\", data);<br>    } catch (error) {<br>        console.error(\"Lỗi khi gọi API:\", error.message);<br>    }<br>}<br><br>fetchData();</div>\n<div> </div>\n<h4>4. <strong>Sử dụng <code>.catch()</code> với Promise</strong></h4>\n<div> </div>\n<div>fetch(\"https://api.example.com/data\")<br>    .then((response) =&gt; {<br>        if (!response.ok) {<br>            throw new Error(`HTTP lỗi: ${response.status}`);<br>        }<br>        return response.json();<br>    })<br>    .then((data) =&gt; console.log(\"Dữ liệu nhận được:\", data))<br>    .catch((error) =&gt; console.error(\"Lỗi khi gọi API:\", error.message));</div>\n<div> </div>\n<h4>5. <strong>Ghi log lỗi để debug</strong></h4>\n<div> </div>\n<div>try {<br>    JSON.parse(\"{name: 'John'}\"); // Lỗi JSON (thiếu dấu ngoặc kép)<br>} catch (error) {<br>    console.error(\"Lỗi JSON:\", error);<br>    // Ghi log lỗi để theo dõi<br>    logErrorToServer(error);<br>}<br><br>function logErrorToServer(error) {<br>    console.log(\"Gửi lỗi đến server:\", error.message);<br>    // Thực hiện gửi log lỗi<br>}</div>\n</div>",
            "image": "https://hvo153.github.io/blog-page/media/posts/12/9.PNG",
            "author": {
                "name": "Võ Hồng Hải"
            },
            "tags": [
                   "BLOGS"
            ],
            "date_published": "2024-12-30T18:20:46+07:00",
            "date_modified": "2024-12-30T18:20:46+07:00"
        },
        {
            "id": "https://hvo153.github.io/blog-page/hamfunction.html",
            "url": "https://hvo153.github.io/blog-page/hamfunction.html",
            "title": "Hàm(Function)",
            "summary": "Function (hàm) là một trong những khối xây dựng quan trọng nhất trong JavaScript, giúp bạn tái sử dụng mã, tổ chức logic, và làm cho chương trình dễ bảo trì hơn. Tùy vào nhu cầu, JavaScript cung cấp nhiều cách định nghĩa hàm, từ&hellip;",
            "content_html": "<p class=\"msg--highlight  msg--success msg \"><strong>Function (hàm)</strong> là một trong những khối xây dựng quan trọng nhất trong JavaScript, giúp bạn tái sử dụng mã, tổ chức logic, và làm cho chương trình dễ bảo trì hơn. Tùy vào nhu cầu, JavaScript cung cấp nhiều cách định nghĩa hàm, từ hàm truyền thống đến các hàm hiện đại như <strong>arrow function</strong>. Dưới đây là kinh nghiệm của tôi khi sử dụng function trong JavaScript.</p>\n<h2>1. <strong>Cách định nghĩa hàm</strong>:</h2>\n<ul>\n<li><strong>Hàm truyền thống (Function Declaration)</strong>:<br>Tôi thường dùng khi cần định nghĩa các hàm có thể được gọi trước khi chúng được khai báo (do tính hoisting).</li>\n<li><strong>Hàm ẩn danh (Anonymous Function)</strong>:<br>Thích hợp khi sử dụng với các callback hoặc khi không cần đặt tên cho hàm.</li>\n<li><strong>Arrow Function</strong>:<br>Gọn nhẹ và hữu ích trong các hàm ngắn hoặc khi cần xử lý ngữ cảnh <code>this</code>. Tuy nhiên, không nên dùng khi bạn cần hàm có <code>this</code> riêng biệt (ví dụ, trong object hoặc hàm constructor).</li>\n</ul>\n<h2>2. <strong>Cách tổ chức logic</strong>:</h2>\n<ul>\n<li><strong>Hàm ngắn gọn và chuyên biệt</strong>:<br>Tôi luôn cố gắng chia nhỏ logic thành nhiều hàm nhỏ, mỗi hàm chỉ thực hiện một nhiệm vụ cụ thể (Single Responsibility Principle). Điều này giúp code dễ đọc và dễ bảo trì hơn.</li>\n</ul>\n<h2>3. <strong>Các tham số và giá trị mặc định</strong>:</h2>\n<ul>\n<li>Khi viết hàm, tôi thường sử dụng giá trị mặc định cho các tham số để xử lý trường hợp người dùng không truyền đủ dữ liệu. Điều này giúp hàm không bị lỗi khi thiếu tham số.</li>\n</ul>\n<h2>4. <strong>Higher-Order Functions (Hàm bậc cao)</strong>:</h2>\n<ul>\n<li>Trong JavaScript, tôi tận dụng các hàm bậc cao như <code>map</code>, <code>filter</code>, <code>reduce</code> để làm việc với mảng. Điều này giúp code ngắn gọn và theo phong cách hàm hơn.</li>\n</ul>\n<h2>5. <strong>Tái sử dụng và modular hóa</strong>:</h2>\n<ul>\n<li>Tách các hàm logic ra thành các tệp riêng biệt hoặc module để tái sử dụng trong toàn bộ ứng dụng. Tôi thường sử dụng <code>export</code> và <code>import</code> trong ES6 để tổ chức code.</li>\n</ul>\n<h2>Ví dụ minh họa</h2>\n<h3>1. <strong>Hàm truyền thống và hàm có tham số mặc định</strong>:</h3>\n<p> </p>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div class=\"flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none\">// Định nghĩa hàm truyền thống<br>function greet(name = \"Guest\") {<br>    return `Xin chào, ${name}!`;<br>}<br><br>console.log(greet());         // Kết quả: Xin chào, Guest!<br>console.log(greet(\"Huy\"));    // Kết quả: Xin chào, Huy!</div>\n<div> </div>\n<h3>2. <strong>Arrow Function và ngữ cảnh <code>this</code></strong>:</h3>\n<p> </p>\n<div>// Arrow Function<br>const square = (num) =&gt; num * num;<br><br>console.log(square(5)); // Kết quả: 25<br><br>// Arrow Function trong object<br>const person = {<br>    name: \"An\",<br>    sayHello: () =&gt; {<br>        console.log(`Xin chào, tôi là ${this.name}`); // undefined (vì arrow function không có ngữ cảnh `this` riêng)<br>    },<br>};<br><br>person.sayHello();</div>\n<div> </div>\n<h3>3. <strong>Higher-Order Function với mảng</strong>:</h3>\n<p> </p>\n<div>const numbers = [1, 2, 3, 4, 5];<br><br>// Sử dụng map<br>const squares = numbers.map((num) =&gt; num * num);<br>console.log(`Bình phương: ${squares}`); // Kết quả: [1, 4, 9, 16, 25]<br><br>// Sử dụng filter<br>const evens = numbers.filter((num) =&gt; num % 2 === 0);<br>console.log(`Số chẵn: ${evens}`); // Kết quả: [2, 4]</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"> </div>\n</div>",
            "image": "https://hvo153.github.io/blog-page/media/posts/11/7.png",
            "author": {
                "name": "Võ Hồng Hải"
            },
            "tags": [
                   "BLOGS"
            ],
            "date_published": "2024-12-30T18:04:43+07:00",
            "date_modified": "2024-12-30T18:05:55+07:00"
        },
        {
            "id": "https://hvo153.github.io/blog-page/dieu-kien-va-vong-lap.html",
            "url": "https://hvo153.github.io/blog-page/dieu-kien-va-vong-lap.html",
            "title": "Điều kiện và vòng lặp",
            "summary": "1. Condition Execution (Cấu trúc điều kiện) if-else: Đây là cấu trúc phổ biến nhất để xử lý điều kiện. Tôi luôn cố gắng giữ điều kiện ngắn gọn và sử dụng toán tử logic (&amp;&amp;, ||) để kết hợp nhiều điều kiện. switch-case: Thích&hellip;",
            "content_html": "<h2>1. <strong>Condition Execution (Cấu trúc điều kiện)</strong></h2>\n<p><strong><code>if-else</code></strong>: Đây là cấu trúc phổ biến nhất để xử lý điều kiện. Tôi luôn cố gắng giữ điều kiện ngắn gọn và sử dụng toán tử logic (<code>&amp;&amp;</code>, <code>||</code>) để kết hợp nhiều điều kiện.</p>\n<p><br><strong><code>switch-case</code></strong>: Thích hợp khi cần kiểm tra nhiều giá trị của cùng một biến. Nó giúp mã nguồn rõ ràng và dễ bảo trì hơn so với nhiều câu lệnh <code>if-else</code>.</p>\n<p><strong>Toán tử ba ngôi (<code>ternary operator</code>)</strong>: Thường dùng để thay thế các câu điều kiện đơn giản, giúp viết code ngắn gọn hơn. Tuy nhiên, không nên lạm dụng khi điều kiện phức tạp.</p>\n<h2>2. <strong>Loop (Vòng lặp)</strong></h2>\n<p><strong><code>for</code></strong>: Dùng để lặp qua một dải giá trị cố định hoặc mảng.</p>\n<p><br><strong><code>while</code></strong> và <strong><code>do-while</code></strong>: Hữu ích khi bạn không biết trước số lần lặp, nhưng cần kiểm tra điều kiện trước hoặc sau mỗi lần lặp.</p>\n<p><br><strong><code>for-of</code> và <code>for-in</code></strong>: Tôi thường dùng <code>for-of</code> để duyệt qua mảng và <code>for-in</code> để duyệt qua thuộc tính của đối tượng.</p>\n<h2>3. <strong>Break, Continue, Return</strong>:</h2>\n<p>Tôi thường sử dụng <code>break</code> để thoát khỏi vòng lặp khi đạt được điều kiện cần thiết, và <code>continue</code> để bỏ qua các lần lặp không cần thiết.</p>\n<p><br>Khi dùng vòng lặp trong hàm, <code>return</code> giúp kết thúc hàm sớm và tránh lãng phí tài nguyên.</p>\n<h2>4. <strong>Lời khuyên</strong>:</h2>\n<p>Luôn tránh lặp vô hạn bằng cách đặt điều kiện rõ ràng.</p>\n<p><br>Đối với các mảng và danh sách, hãy sử dụng các phương thức như <code>forEach</code>, <code>map</code>, hoặc <code>filter</code> thay vì vòng lặp thủ công để tối ưu hiệu suất.</p>\n<p><br>Sử dụng dấu ngoặc <code>{}</code> kể cả khi chỉ có một dòng bên trong <code>if</code> hoặc vòng lặp để tăng tính dễ đọc.</p>\n<h2>Ví dụ minh họa</h2>\n<h2>1. <strong>Cấu trúc điều kiện: <code>if-else</code> và <code>switch-case</code></strong></h2>\n<p>let score = 85;<br><br>// Sử dụng if-else<br>if (score &gt;= 90) {<br>    console.log(\"Xuất sắc\");<br>} else if (score &gt;= 70) {<br>    console.log(\"Khá\");<br>} else {<br>    console.log(\"Cần cố gắng hơn\");<br>}<br><br>// Sử dụng switch-case<br>let grade = \"B\";<br>switch (grade) {<br>    case \"A\":<br>        console.log(\"Xuất sắc\");<br>        break;<br>    case \"B\":<br>        console.log(\"Khá\");<br>        break;<br>    default:<br>        console.log(\"Cần cố gắng hơn\");<br>}</p>\n<h2>2. <strong>Vòng lặp: <code>for</code>, <code>while</code>, và <code>for-of</code></strong></h2>\n<p>// Sử dụng for<br>for (let i = 1; i &lt;= 5; i++) {<br>    console.log(`Lần lặp: ${i}`);<br>}<br><br>// Sử dụng while<br>let count = 3;<br>while (count &gt; 0) {<br>    console.log(`Đếm ngược: ${count}`);<br>    count--;<br>}<br><br>// Sử dụng for-of<br>let fruits = [\"Táo\", \"Cam\", \"Xoài\"];<br>for (let fruit of fruits) {<br>    console.log(`Trái cây: ${fruit}`);<br>}</p>\n<h2>3. <strong>Sử dụng break và continue</strong></h2>\n<p>// Tìm số chẵn đầu tiên lớn hơn 5 trong mảng<br>let numbers = [1, 3, 5, 6, 8];<br>for (let num of numbers) {<br>    if (num % 2 !== 0) continue; // Bỏ qua số lẻ<br>    if (num &gt; 5) {<br>        console.log(`Số chẵn đầu tiên lớn hơn 5: ${num}`);<br>        break; // Thoát vòng lặp khi tìm thấy<br>    }<br>}</p>\n<h2>4. <strong>Kết hợp điều kiện và vòng lặp trong hàm</strong></h2>\n<p>function findEvenNumbers(arr) {<br>    let result = [];<br>    for (let num of arr) {<br>        if (num % 2 === 0) {<br>            result.push(num); // Thêm số chẵn vào mảng kết quả<br>        }<br>    }<br>    return result;<br>}<br><br>let numbers = [1, 2, 3, 4, 5, 6];<br>console.log(`Các số chẵn: ${findEvenNumbers(numbers)}`); // Kết quả: [2, 4, 6]</p>",
            "image": "https://hvo153.github.io/blog-page/media/posts/10/4.png",
            "author": {
                "name": "Võ Hồng Hải"
            },
            "tags": [
                   "BLOGS"
            ],
            "date_published": "2024-12-30T17:57:41+07:00",
            "date_modified": "2024-12-30T17:58:51+07:00"
        },
        {
            "id": "https://hvo153.github.io/blog-page/toan-tu.html",
            "url": "https://hvo153.github.io/blog-page/toan-tu.html",
            "title": "Toán tử",
            "summary": "Toán tử số học (Arithmetic Operators): Các toán tử như +, -, *, /, % rất cơ bản nhưng có thể kết hợp với các phương thức khác như Math.floor(), Math.random() để tạo ra logic phức tạp. Tôi thường dùng % để kiểm tra số&hellip;",
            "content_html": "<h1><strong>Toán tử số học (Arithmetic Operators)</strong>:</h1>\n<p><br>Các toán tử như <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> rất cơ bản nhưng có thể kết hợp với các phương thức khác như <code>Math.floor()</code>, <code>Math.random()</code> để tạo ra logic phức tạp. Tôi thường dùng <code>%</code> để kiểm tra số chẵn/lẻ hoặc tính chu kỳ trong vòng lặp.</p>\n<p> </p>\n<h1><strong>Toán tử gán (Assignment Operators)</strong>:</h1>\n<p><br>Dùng các toán tử như <code>+=</code>, <code>-=</code>, <code>*=</code>, và <code>/=</code> giúp viết code gọn gàng hơn. Thay vì viết <code>x = x + 1</code>, tôi dùng <code>x += 1</code> để tăng tính dễ đọc.</p>\n<p> </p>\n<h1><strong>Toán tử so sánh (Comparison Operators)</strong>:</h1>\n<p><br>Hiểu sự khác biệt giữa <code>==</code> và <code>===</code> rất quan trọng. Tôi luôn ưu tiên <code>===</code> để tránh các lỗi do JavaScript tự động chuyển đổi kiểu dữ liệu. Ví dụ, <code>\"5\" == 5</code> trả về <code>true</code> nhưng <code>\"5\" === 5</code> trả về <code>false</code>.</p>\n<p> </p>\n<h1><strong>Toán tử logic (Logical Operators)</strong>:</h1>\n<p><br>Các toán tử <code>&amp;&amp;</code> (AND), <code>||</code> (OR) và <code>!</code> (NOT) không chỉ kiểm tra điều kiện mà còn giúp tối ưu hóa logic. Đặc biệt, toán tử ngắn mạch (short-circuit) với <code>&amp;&amp;</code> và <code>||</code> rất hữu ích khi kiểm tra giá trị hoặc gán mặc định. Ví dụ: <code>let result = value || \"default\";</code>.</p>\n<p> </p>\n<h1><strong>Toán tử ba ngôi (Ternary Operator)</strong>:</h1>\n<p><br>Thay vì viết một câu lệnh <code>if-else</code> dài dòng, tôi dùng toán tử ba ngôi <code>condition ? value1 : value2;</code> để xử lý các điều kiện ngắn gọn.</p>\n<p> </p>\n<h1><strong>Toán tử nullish (??)</strong>:</h1>\n<p><br>Đây là một bổ sung tuyệt vời để kiểm tra các giá trị <code>null</code> hoặc <code>undefined</code>. Tôi thường dùng nó để gán giá trị mặc định khi biến có thể không được định nghĩa.</p>\n<p> </p>\n<h1>Ví dụ minh họa:</h1>\n<h2>1. <strong>Toán tử số học và gán</strong>:</h2>\n<p> </p>\n<p class=\"align-left\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">10</span>;</p>\n<p class=\"align-left\"><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">3</span>;</p>\n<p class=\"align-left\"><span class=\"hljs-comment\">// Sử dụng toán tử số học</span></p>\n<p class=\"align-left\"><span class=\"hljs-keyword\">let</span> sum = a + b; <span class=\"hljs-comment\">// 13</span></p>\n<p class=\"align-left\"><span class=\"hljs-keyword\">let</span> remainder = a % b; <span class=\"hljs-comment\">// 1</span></p>\n<p class=\"align-left\"><span class=\"hljs-comment\">// Toán tử gán</span></p>\n<p class=\"align-left\">a += <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// a = 15</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Tổng: <span class=\"hljs-subst\">${sum}</span>, Dư: <span class=\"hljs-subst\">${remainder}</span>, a sau khi gán: <span class=\"hljs-subst\">${a}</span>`</span>);</p>\n<h2>2. <strong>So sánh <code>==</code> và <code>===</code></strong>:</h2>\n<p> </p>\n<p><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-string\">\"5\"</span>;</p>\n<p><span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">5</span>;</p>\n<p><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x == y); <span class=\"hljs-comment\">// true (so sánh giá trị, không xét kiểu)</span></p>\n<p><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x === y); <span class=\"hljs-comment\">// false (so sánh giá trị và kiểu)</span></p>\n<p> </p>\n<h2>3. <strong>Toán tử logic và nullish</strong>:</h2>\n<p> </p>\n<p><span class=\"hljs-keyword\">let</span> username = <span class=\"hljs-literal\">null</span>;</p>\n<p><span class=\"hljs-keyword\">let</span> defaultName = <span class=\"hljs-string\">\"Guest\"</span>;</p>\n<p><span class=\"hljs-comment\">// Sử dụng || và ??</span></p>\n<p><span class=\"hljs-keyword\">let</span> displayName = username || <span class=\"hljs-string\">\"Anonymous\"</span>; <span class=\"hljs-comment\">// Dùng giá trị đầu tiên không \"falsy\"</span></p>\n<p><span class=\"hljs-keyword\">let</span> betterName = username ?? defaultName; <span class=\"hljs-comment\">// Chỉ kiểm tra null hoặc undefined</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Tên hiển thị: <span class=\"hljs-subst\">${displayName}</span>, Tên tốt hơn: <span class=\"hljs-subst\">${betterName}</span>`</span>);</p>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div class=\"flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none\"> </div>\n<h2 class=\"overflow-y-auto p-4\" dir=\"ltr\">4. <strong>Toán tử ba ngôi</strong>:</h2>\n<p> </p>\n<p><span class=\"hljs-keyword\">let</span> score = <span class=\"hljs-number\">85</span>;</p>\n<p><span class=\"hljs-keyword\">let</span> result = score &gt;= <span class=\"hljs-number\">50</span> ? <span class=\"hljs-string\">\"Đậu\"</span> : <span class=\"hljs-string\">\"Rớt\"</span>;</p>\n<p><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Kết quả: <span class=\"hljs-subst\">${result}</span>`</span>); <span class=\"hljs-comment\">// Kết quả: Đậu</span></p>\n</div>",
            "image": "https://hvo153.github.io/blog-page/media/posts/9/21.PNG",
            "author": {
                "name": "Võ Hồng Hải"
            },
            "tags": [
                   "BLOGS"
            ],
            "date_published": "2024-12-29T23:16:52+07:00",
            "date_modified": "2024-12-29T23:21:59+07:00"
        },
        {
            "id": "https://hvo153.github.io/blog-page/bienkieu-du-lieu-trong-javascript.html",
            "url": "https://hvo153.github.io/blog-page/bienkieu-du-lieu-trong-javascript.html",
            "title": "Biến,kiểu dữ liệu trong JavaScript",
            "summary": "Khi làm việc với JavaScript, việc hiểu cách sử dụng biến (variable) là rất quan trọng. Bạn cần chọn đúng từ khóa như let, const hoặc var dựa trên nhu cầu và ngữ cảnh sử dụng. Tôi thường dùng const cho những giá trị cố&hellip;",
            "content_html": "<p>Khi làm việc với JavaScript, việc hiểu cách sử dụng biến (<strong>variable</strong>) là rất quan trọng. Bạn cần chọn đúng từ khóa như <code>let</code>, <code>const</code> hoặc <code>var</code> dựa trên nhu cầu và ngữ cảnh sử dụng. Tôi thường dùng <code>const</code> cho những giá trị cố định để tránh vô tình thay đổi, còn <code>let</code> cho những giá trị cần cập nhật. Việc sử dụng <code>var</code> thường bị hạn chế do phạm vi của nó không rõ ràng, dễ gây lỗi trong các ứng dụng lớn.</p>\n<p>Về <strong>data type</strong>, JavaScript có sự phân biệt rõ giữa <strong>primitive</strong> và <strong>non-primitive</strong>. Tuy nhiên, kiểu dữ liệu động (dynamic typing) của JavaScript đôi khi gây bất ngờ. Ví dụ, khi cộng chuỗi với số, kết quả sẽ thành chuỗi thay vì số. Điều này dẫn đến tầm quan trọng của việc ép kiểu (<strong>type casting</strong>). Tôi luôn cẩn thận khi xử lý dữ liệu, sử dụng hàm <code>Number()</code>, <code>String()</code> hoặc <code>Boolean()</code> để đảm bảo đúng kiểu, tránh lỗi logic trong chương trình.</p>\n<p>Ngoài ra, việc sử dụng <strong>comment</strong> là điều cần thiết trong các dự án nhóm hoặc khi bạn muốn tài liệu hóa code. Tôi thường dùng <strong>comment một dòng</strong> để chú thích nhanh, và <strong>comment nhiều dòng</strong> để giải thích các phần code phức tạp.</p>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div dir=\"ltr\"> </div>\n<div dir=\"ltr\"> </div>\n<h1 dir=\"ltr\">Ví dụ minh họa:</h1>\n<h1 dir=\"ltr\">1. Sử dụng biến và kiểu dữ liệu:</h1>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\">// Chọn đúng từ khóa khai báo<br>const pi = 3.14;         // const: giá trị không đổi<br>let radius = 5;          // let: có thể cập nhật<br>let area = pi * radius ** 2; <br><br>console.log(`Diện tích hình tròn: ${area}`); // Kết quả: 78.5</div>\n<div dir=\"ltr\"> </div>\n<h2 dir=\"ltr\">2. Sự quan trọng của ép kiểu:</h2>\n<p><span class=\"hljs-keyword\">let</span> strNum = <span class=\"hljs-string\">\"123\"</span>;</p>\n<p><span class=\"hljs-keyword\">let</span> num = <span class=\"hljs-number\">456</span>;</p>\n<p><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(strNum + num); <span class=\"hljs-comment\">// \"123456\" (nối chuỗi, không phải cộng số)</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Number</span>(strNum) + num); <span class=\"hljs-comment\">// 579 (ép kiểu đúng cách)</span></p>\n<p> </p>\n<p><br>Tên của các biến trong JavaScript có thể là hầu như bất kỳ chuỗi ký tự nào. Tuy nhiên, có một tập hợp các từ dành riêng không thể được sử dụng để đặt tên cho các biến, hàm hoặc bất kỳ thứ gì khác. Chúng là các phần không thể thiếu của ngôn ngữ và được gán ý nghĩa không thể thay đổi. Dưới đây bạn sẽ tìm thấy danh sách các từ đó.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://hvo153.github.io/blog-page/media/posts/8/8-2.PNG\" alt=\"\" width=\"1030\" height=\"659\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://hvo153.github.io/blog-page/media/posts/8/responsive/8-2-xs.PNG 300w ,https://hvo153.github.io/blog-page/media/posts/8/responsive/8-2-sm.PNG 480w ,https://hvo153.github.io/blog-page/media/posts/8/responsive/8-2-md.PNG 768w ,https://hvo153.github.io/blog-page/media/posts/8/responsive/8-2-lg.PNG 1024w ,https://hvo153.github.io/blog-page/media/posts/8/responsive/8-2-xl.PNG 1360w ,https://hvo153.github.io/blog-page/media/posts/8/responsive/8-2-2xl.PNG 1600w\"></figure>\n</div>",
            "image": "https://hvo153.github.io/blog-page/media/posts/8/12.png",
            "author": {
                "name": "Võ Hồng Hải"
            },
            "tags": [
                   "BLOGS"
            ],
            "date_published": "2024-12-29T22:40:59+07:00",
            "date_modified": "2024-12-29T22:59:52+07:00"
        },
        {
            "id": "https://hvo153.github.io/blog-page/bai-dang-1.html",
            "url": "https://hvo153.github.io/blog-page/bai-dang-1.html",
            "title": "Giới thiệu về JavaScript",
            "summary": "JavaScript là gì? JavaScript viết tắt là JS à ngôn ngữ lập trình phổ biến dùng để tạo ra các trang web tương tác. Được tích hợp và nhúng vào HTML giúp website trở nên sống động hơn. JavaScript đóng vai trò như một phần của trang web, thực&hellip;",
            "content_html": "<h2 id=\"javascript-la-gi\" class=\"wp-block-heading ftwp-heading\">JavaScript là gì?</h2>\n<p class=\"align-left\">JavaScript viết tắt là JS à <a class=\"rank-math-link\" href=\"https://vietnix.vn/ngon-ngu-lap-trinh/\">ngôn ngữ lập trình</a> phổ biến dùng để tạo ra các trang web tương tác. Được tích hợp và nhúng vào <a href=\"https://vietnix.vn/html-la-gi/\" target=\"_blank\" rel=\"noreferrer noopener\">HTML</a> giúp website trở nên sống động hơn. JavaScript đóng vai trò như một phần của trang web, thực thi cho phép Client-Side Script từ phía người dùng cũng như phía máy chủ (<a href=\"https://vietnix.vn/nodejs-la-gi/\" target=\"_blank\" rel=\"noreferrer noopener\">Nodejs</a>) tạo ra các trang web động.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://hvo153.github.io/blog-page/media/posts/6/5.PNG\" alt=\"\" width=\"683\" height=\"312\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://hvo153.github.io/blog-page/media/posts/6/responsive/5-xs.PNG 300w ,https://hvo153.github.io/blog-page/media/posts/6/responsive/5-sm.PNG 480w ,https://hvo153.github.io/blog-page/media/posts/6/responsive/5-md.PNG 768w ,https://hvo153.github.io/blog-page/media/posts/6/responsive/5-lg.PNG 1024w ,https://hvo153.github.io/blog-page/media/posts/6/responsive/5-xl.PNG 1360w ,https://hvo153.github.io/blog-page/media/posts/6/responsive/5-2xl.PNG 1600w\"></figure>\n<p class=\"align-left\">JavaScript là một ngôn ngữ lập trình thông dịch với khả năng hướng đến đối tượng. Là một trong 3 ngôn ngữ chính trong lập trình web và có mối liên hệ lẫn nhau để xây dựng một website sống động, chuyên nghiệp, bạn có thể nhìn tổng quan như sau:</p>\n<ul class=\"wp-block-list\">\n<li><strong>HTML</strong>: Cung cấp cấu trúc cơ bản, hỗ trợ trong việc xây dựng layout, thêm nội dung dễ dàng trên website.</li>\n<li><strong><a href=\"https://vietnix.vn/css-la-gi/\" target=\"_blank\" rel=\"noreferrer noopener\">CSS</a></strong>: Được sử dụng để kiểm soát và hỗ trợ việc định dạng thiết kế, bố cục, style, màu sắc,…</li>\n<li><strong>JavaScript</strong>: Tạo nên những nội dung “động” trên website.</li>\n</ul>",
            "image": "https://hvo153.github.io/blog-page/media/posts/6/6.PNG",
            "author": {
                "name": "Võ Hồng Hải"
            },
            "tags": [
                   "BLOGS"
            ],
            "date_published": "2024-12-29T21:43:15+07:00",
            "date_modified": "2024-12-29T22:18:53+07:00"
        }
    ]
}
