{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hai&#x27;s Web",
    "description": "",
    "home_page_url": "https://hvo153.github.io/blog-page",
    "feed_url": "https://hvo153.github.io/blog-page/feed.json",
    "user_comment": "",
    "icon": "https://hvo153.github.io/blog-page/media/website/reindeer-1.png",
    "author": {
        "name": "Võ Hồng Hải"
    },
    "items": [
        {
            "id": "https://hvo153.github.io/blog-page/hamfunction.html",
            "url": "https://hvo153.github.io/blog-page/hamfunction.html",
            "title": "Hàm(Function)",
            "summary": "Function (hàm) là một trong những khối xây dựng quan trọng nhất&hellip;",
            "content_html": "<p class=\"msg--highlight  msg--success msg \"><strong>Function (hàm)</strong> là một trong những khối xây dựng quan trọng nhất trong JavaScript, giúp bạn tái sử dụng mã, tổ chức logic, và làm cho chương trình dễ bảo trì hơn. Tùy vào nhu cầu, JavaScript cung cấp nhiều cách định nghĩa hàm, từ hàm truyền thống đến các hàm hiện đại như <strong>arrow function</strong>. Dưới đây là kinh nghiệm của tôi khi sử dụng function trong JavaScript.</p>\n<h2>1. <strong>Cách định nghĩa hàm</strong>:</h2>\n<ul>\n<li><strong>Hàm truyền thống (Function Declaration)</strong>:<br>Tôi thường dùng khi cần định nghĩa các hàm có thể được gọi trước khi chúng được khai báo (do tính hoisting).</li>\n<li><strong>Hàm ẩn danh (Anonymous Function)</strong>:<br>Thích hợp khi sử dụng với các callback hoặc khi không cần đặt tên cho hàm.</li>\n<li><strong>Arrow Function</strong>:<br>Gọn nhẹ và hữu ích trong các hàm ngắn hoặc khi cần xử lý ngữ cảnh <code>this</code>. Tuy nhiên, không nên dùng khi bạn cần hàm có <code>this</code> riêng biệt (ví dụ, trong object hoặc hàm constructor).</li>\n</ul>\n<h2>2. <strong>Cách tổ chức logic</strong>:</h2>\n<ul>\n<li><strong>Hàm ngắn gọn và chuyên biệt</strong>:<br>Tôi luôn cố gắng chia nhỏ logic thành nhiều hàm nhỏ, mỗi hàm chỉ thực hiện một nhiệm vụ cụ thể (Single Responsibility Principle). Điều này giúp code dễ đọc và dễ bảo trì hơn.</li>\n</ul>\n<h2>3. <strong>Các tham số và giá trị mặc định</strong>:</h2>\n<ul>\n<li>Khi viết hàm, tôi thường sử dụng giá trị mặc định cho các tham số để xử lý trường hợp người dùng không truyền đủ dữ liệu. Điều này giúp hàm không bị lỗi khi thiếu tham số.</li>\n</ul>\n<h2>4. <strong>Higher-Order Functions (Hàm bậc cao)</strong>:</h2>\n<ul>\n<li>Trong JavaScript, tôi tận dụng các hàm bậc cao như <code>map</code>, <code>filter</code>, <code>reduce</code> để làm việc với mảng. Điều này giúp code ngắn gọn và theo phong cách hàm hơn.</li>\n</ul>\n<h2>5. <strong>Tái sử dụng và modular hóa</strong>:</h2>\n<ul>\n<li>Tách các hàm logic ra thành các tệp riêng biệt hoặc module để tái sử dụng trong toàn bộ ứng dụng. Tôi thường sử dụng <code>export</code> và <code>import</code> trong ES6 để tổ chức code.</li>\n</ul>\n<h2>Ví dụ minh họa</h2>\n<h3>1. <strong>Hàm truyền thống và hàm có tham số mặc định</strong>:</h3>\n<p> </p>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div class=\"flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none\">// Định nghĩa hàm truyền thống<br>function greet(name = \"Guest\") {<br>    return `Xin chào, ${name}!`;<br>}<br><br>console.log(greet());         // Kết quả: Xin chào, Guest!<br>console.log(greet(\"Huy\"));    // Kết quả: Xin chào, Huy!</div>\n<div> </div>\n<h3>2. <strong>Arrow Function và ngữ cảnh <code>this</code></strong>:</h3>\n<p> </p>\n<div>// Arrow Function<br>const square = (num) =&gt; num * num;<br><br>console.log(square(5)); // Kết quả: 25<br><br>// Arrow Function trong object<br>const person = {<br>    name: \"An\",<br>    sayHello: () =&gt; {<br>        console.log(`Xin chào, tôi là ${this.name}`); // undefined (vì arrow function không có ngữ cảnh `this` riêng)<br>    },<br>};<br><br>person.sayHello();</div>\n<div> </div>\n<h3>3. <strong>Higher-Order Function với mảng</strong>:</h3>\n<p> </p>\n<div>const numbers = [1, 2, 3, 4, 5];<br><br>// Sử dụng map<br>const squares = numbers.map((num) =&gt; num * num);<br>console.log(`Bình phương: ${squares}`); // Kết quả: [1, 4, 9, 16, 25]<br><br>// Sử dụng filter<br>const evens = numbers.filter((num) =&gt; num % 2 === 0);<br>console.log(`Số chẵn: ${evens}`); // Kết quả: [2, 4]</div>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\"> </div>\n</div>",
            "image": "https://hvo153.github.io/blog-page/media/posts/11/7.png",
            "author": {
                "name": "Võ Hồng Hải"
            },
            "tags": [
                   "BLOGS"
            ],
            "date_published": "2024-12-30T18:04:43+07:00",
            "date_modified": "2024-12-30T18:05:55+07:00"
        },
        {
            "id": "https://hvo153.github.io/blog-page/dieu-kien-va-vong-lap.html",
            "url": "https://hvo153.github.io/blog-page/dieu-kien-va-vong-lap.html",
            "title": "Điều kiện và vòng lặp",
            "summary": "1. Condition Execution (Cấu trúc điều kiện) if-else: Đây là cấu trúc&hellip;",
            "content_html": "<h2>1. <strong>Condition Execution (Cấu trúc điều kiện)</strong></h2>\n<p><strong><code>if-else</code></strong>: Đây là cấu trúc phổ biến nhất để xử lý điều kiện. Tôi luôn cố gắng giữ điều kiện ngắn gọn và sử dụng toán tử logic (<code>&amp;&amp;</code>, <code>||</code>) để kết hợp nhiều điều kiện.</p>\n<p><br><strong><code>switch-case</code></strong>: Thích hợp khi cần kiểm tra nhiều giá trị của cùng một biến. Nó giúp mã nguồn rõ ràng và dễ bảo trì hơn so với nhiều câu lệnh <code>if-else</code>.</p>\n<p><strong>Toán tử ba ngôi (<code>ternary operator</code>)</strong>: Thường dùng để thay thế các câu điều kiện đơn giản, giúp viết code ngắn gọn hơn. Tuy nhiên, không nên lạm dụng khi điều kiện phức tạp.</p>\n<h2>2. <strong>Loop (Vòng lặp)</strong></h2>\n<p><strong><code>for</code></strong>: Dùng để lặp qua một dải giá trị cố định hoặc mảng.</p>\n<p><br><strong><code>while</code></strong> và <strong><code>do-while</code></strong>: Hữu ích khi bạn không biết trước số lần lặp, nhưng cần kiểm tra điều kiện trước hoặc sau mỗi lần lặp.</p>\n<p><br><strong><code>for-of</code> và <code>for-in</code></strong>: Tôi thường dùng <code>for-of</code> để duyệt qua mảng và <code>for-in</code> để duyệt qua thuộc tính của đối tượng.</p>\n<h2>3. <strong>Break, Continue, Return</strong>:</h2>\n<p>Tôi thường sử dụng <code>break</code> để thoát khỏi vòng lặp khi đạt được điều kiện cần thiết, và <code>continue</code> để bỏ qua các lần lặp không cần thiết.</p>\n<p><br>Khi dùng vòng lặp trong hàm, <code>return</code> giúp kết thúc hàm sớm và tránh lãng phí tài nguyên.</p>\n<h2>4. <strong>Lời khuyên</strong>:</h2>\n<p>Luôn tránh lặp vô hạn bằng cách đặt điều kiện rõ ràng.</p>\n<p><br>Đối với các mảng và danh sách, hãy sử dụng các phương thức như <code>forEach</code>, <code>map</code>, hoặc <code>filter</code> thay vì vòng lặp thủ công để tối ưu hiệu suất.</p>\n<p><br>Sử dụng dấu ngoặc <code>{}</code> kể cả khi chỉ có một dòng bên trong <code>if</code> hoặc vòng lặp để tăng tính dễ đọc.</p>\n<h2>Ví dụ minh họa</h2>\n<h2>1. <strong>Cấu trúc điều kiện: <code>if-else</code> và <code>switch-case</code></strong></h2>\n<p>let score = 85;<br><br>// Sử dụng if-else<br>if (score &gt;= 90) {<br>    console.log(\"Xuất sắc\");<br>} else if (score &gt;= 70) {<br>    console.log(\"Khá\");<br>} else {<br>    console.log(\"Cần cố gắng hơn\");<br>}<br><br>// Sử dụng switch-case<br>let grade = \"B\";<br>switch (grade) {<br>    case \"A\":<br>        console.log(\"Xuất sắc\");<br>        break;<br>    case \"B\":<br>        console.log(\"Khá\");<br>        break;<br>    default:<br>        console.log(\"Cần cố gắng hơn\");<br>}</p>\n<h2>2. <strong>Vòng lặp: <code>for</code>, <code>while</code>, và <code>for-of</code></strong></h2>\n<p>// Sử dụng for<br>for (let i = 1; i &lt;= 5; i++) {<br>    console.log(`Lần lặp: ${i}`);<br>}<br><br>// Sử dụng while<br>let count = 3;<br>while (count &gt; 0) {<br>    console.log(`Đếm ngược: ${count}`);<br>    count--;<br>}<br><br>// Sử dụng for-of<br>let fruits = [\"Táo\", \"Cam\", \"Xoài\"];<br>for (let fruit of fruits) {<br>    console.log(`Trái cây: ${fruit}`);<br>}</p>\n<h2>3. <strong>Sử dụng break và continue</strong></h2>\n<p>// Tìm số chẵn đầu tiên lớn hơn 5 trong mảng<br>let numbers = [1, 3, 5, 6, 8];<br>for (let num of numbers) {<br>    if (num % 2 !== 0) continue; // Bỏ qua số lẻ<br>    if (num &gt; 5) {<br>        console.log(`Số chẵn đầu tiên lớn hơn 5: ${num}`);<br>        break; // Thoát vòng lặp khi tìm thấy<br>    }<br>}</p>\n<h2>4. <strong>Kết hợp điều kiện và vòng lặp trong hàm</strong></h2>\n<p>function findEvenNumbers(arr) {<br>    let result = [];<br>    for (let num of arr) {<br>        if (num % 2 === 0) {<br>            result.push(num); // Thêm số chẵn vào mảng kết quả<br>        }<br>    }<br>    return result;<br>}<br><br>let numbers = [1, 2, 3, 4, 5, 6];<br>console.log(`Các số chẵn: ${findEvenNumbers(numbers)}`); // Kết quả: [2, 4, 6]</p>",
            "image": "https://hvo153.github.io/blog-page/media/posts/10/4.png",
            "author": {
                "name": "Võ Hồng Hải"
            },
            "tags": [
                   "BLOGS"
            ],
            "date_published": "2024-12-30T17:57:41+07:00",
            "date_modified": "2024-12-30T17:58:51+07:00"
        },
        {
            "id": "https://hvo153.github.io/blog-page/toan-tu.html",
            "url": "https://hvo153.github.io/blog-page/toan-tu.html",
            "title": "Toán tử",
            "summary": "Toán tử số học (Arithmetic Operators): Các toán tử như +, -,&hellip;",
            "content_html": "<h1><strong>Toán tử số học (Arithmetic Operators)</strong>:</h1>\n<p><br>Các toán tử như <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> rất cơ bản nhưng có thể kết hợp với các phương thức khác như <code>Math.floor()</code>, <code>Math.random()</code> để tạo ra logic phức tạp. Tôi thường dùng <code>%</code> để kiểm tra số chẵn/lẻ hoặc tính chu kỳ trong vòng lặp.</p>\n<p> </p>\n<h1><strong>Toán tử gán (Assignment Operators)</strong>:</h1>\n<p><br>Dùng các toán tử như <code>+=</code>, <code>-=</code>, <code>*=</code>, và <code>/=</code> giúp viết code gọn gàng hơn. Thay vì viết <code>x = x + 1</code>, tôi dùng <code>x += 1</code> để tăng tính dễ đọc.</p>\n<p> </p>\n<h1><strong>Toán tử so sánh (Comparison Operators)</strong>:</h1>\n<p><br>Hiểu sự khác biệt giữa <code>==</code> và <code>===</code> rất quan trọng. Tôi luôn ưu tiên <code>===</code> để tránh các lỗi do JavaScript tự động chuyển đổi kiểu dữ liệu. Ví dụ, <code>\"5\" == 5</code> trả về <code>true</code> nhưng <code>\"5\" === 5</code> trả về <code>false</code>.</p>\n<p> </p>\n<h1><strong>Toán tử logic (Logical Operators)</strong>:</h1>\n<p><br>Các toán tử <code>&amp;&amp;</code> (AND), <code>||</code> (OR) và <code>!</code> (NOT) không chỉ kiểm tra điều kiện mà còn giúp tối ưu hóa logic. Đặc biệt, toán tử ngắn mạch (short-circuit) với <code>&amp;&amp;</code> và <code>||</code> rất hữu ích khi kiểm tra giá trị hoặc gán mặc định. Ví dụ: <code>let result = value || \"default\";</code>.</p>\n<p> </p>\n<h1><strong>Toán tử ba ngôi (Ternary Operator)</strong>:</h1>\n<p><br>Thay vì viết một câu lệnh <code>if-else</code> dài dòng, tôi dùng toán tử ba ngôi <code>condition ? value1 : value2;</code> để xử lý các điều kiện ngắn gọn.</p>\n<p> </p>\n<h1><strong>Toán tử nullish (??)</strong>:</h1>\n<p><br>Đây là một bổ sung tuyệt vời để kiểm tra các giá trị <code>null</code> hoặc <code>undefined</code>. Tôi thường dùng nó để gán giá trị mặc định khi biến có thể không được định nghĩa.</p>\n<p> </p>\n<h1>Ví dụ minh họa:</h1>\n<h2>1. <strong>Toán tử số học và gán</strong>:</h2>\n<p> </p>\n<p class=\"align-left\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">10</span>;</p>\n<p class=\"align-left\"><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">3</span>;</p>\n<p class=\"align-left\"><span class=\"hljs-comment\">// Sử dụng toán tử số học</span></p>\n<p class=\"align-left\"><span class=\"hljs-keyword\">let</span> sum = a + b; <span class=\"hljs-comment\">// 13</span></p>\n<p class=\"align-left\"><span class=\"hljs-keyword\">let</span> remainder = a % b; <span class=\"hljs-comment\">// 1</span></p>\n<p class=\"align-left\"><span class=\"hljs-comment\">// Toán tử gán</span></p>\n<p class=\"align-left\">a += <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// a = 15</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Tổng: <span class=\"hljs-subst\">${sum}</span>, Dư: <span class=\"hljs-subst\">${remainder}</span>, a sau khi gán: <span class=\"hljs-subst\">${a}</span>`</span>);</p>\n<h2>2. <strong>So sánh <code>==</code> và <code>===</code></strong>:</h2>\n<p> </p>\n<p><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-string\">\"5\"</span>;</p>\n<p><span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">5</span>;</p>\n<p><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x == y); <span class=\"hljs-comment\">// true (so sánh giá trị, không xét kiểu)</span></p>\n<p><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x === y); <span class=\"hljs-comment\">// false (so sánh giá trị và kiểu)</span></p>\n<p> </p>\n<h2>3. <strong>Toán tử logic và nullish</strong>:</h2>\n<p> </p>\n<p><span class=\"hljs-keyword\">let</span> username = <span class=\"hljs-literal\">null</span>;</p>\n<p><span class=\"hljs-keyword\">let</span> defaultName = <span class=\"hljs-string\">\"Guest\"</span>;</p>\n<p><span class=\"hljs-comment\">// Sử dụng || và ??</span></p>\n<p><span class=\"hljs-keyword\">let</span> displayName = username || <span class=\"hljs-string\">\"Anonymous\"</span>; <span class=\"hljs-comment\">// Dùng giá trị đầu tiên không \"falsy\"</span></p>\n<p><span class=\"hljs-keyword\">let</span> betterName = username ?? defaultName; <span class=\"hljs-comment\">// Chỉ kiểm tra null hoặc undefined</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Tên hiển thị: <span class=\"hljs-subst\">${displayName}</span>, Tên tốt hơn: <span class=\"hljs-subst\">${betterName}</span>`</span>);</p>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div class=\"flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none\"> </div>\n<h2 class=\"overflow-y-auto p-4\" dir=\"ltr\">4. <strong>Toán tử ba ngôi</strong>:</h2>\n<p> </p>\n<p><span class=\"hljs-keyword\">let</span> score = <span class=\"hljs-number\">85</span>;</p>\n<p><span class=\"hljs-keyword\">let</span> result = score &gt;= <span class=\"hljs-number\">50</span> ? <span class=\"hljs-string\">\"Đậu\"</span> : <span class=\"hljs-string\">\"Rớt\"</span>;</p>\n<p><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Kết quả: <span class=\"hljs-subst\">${result}</span>`</span>); <span class=\"hljs-comment\">// Kết quả: Đậu</span></p>\n</div>",
            "image": "https://hvo153.github.io/blog-page/media/posts/9/21.PNG",
            "author": {
                "name": "Võ Hồng Hải"
            },
            "tags": [
                   "BLOGS"
            ],
            "date_published": "2024-12-29T23:16:52+07:00",
            "date_modified": "2024-12-29T23:21:59+07:00"
        },
        {
            "id": "https://hvo153.github.io/blog-page/bienkieu-du-lieu-trong-javascript.html",
            "url": "https://hvo153.github.io/blog-page/bienkieu-du-lieu-trong-javascript.html",
            "title": "Biến,kiểu dữ liệu trong JavaScript",
            "summary": "Khi làm việc với JavaScript, việc hiểu cách sử dụng biến (variable)&hellip;",
            "content_html": "<p>Khi làm việc với JavaScript, việc hiểu cách sử dụng biến (<strong>variable</strong>) là rất quan trọng. Bạn cần chọn đúng từ khóa như <code>let</code>, <code>const</code> hoặc <code>var</code> dựa trên nhu cầu và ngữ cảnh sử dụng. Tôi thường dùng <code>const</code> cho những giá trị cố định để tránh vô tình thay đổi, còn <code>let</code> cho những giá trị cần cập nhật. Việc sử dụng <code>var</code> thường bị hạn chế do phạm vi của nó không rõ ràng, dễ gây lỗi trong các ứng dụng lớn.</p>\n<p>Về <strong>data type</strong>, JavaScript có sự phân biệt rõ giữa <strong>primitive</strong> và <strong>non-primitive</strong>. Tuy nhiên, kiểu dữ liệu động (dynamic typing) của JavaScript đôi khi gây bất ngờ. Ví dụ, khi cộng chuỗi với số, kết quả sẽ thành chuỗi thay vì số. Điều này dẫn đến tầm quan trọng của việc ép kiểu (<strong>type casting</strong>). Tôi luôn cẩn thận khi xử lý dữ liệu, sử dụng hàm <code>Number()</code>, <code>String()</code> hoặc <code>Boolean()</code> để đảm bảo đúng kiểu, tránh lỗi logic trong chương trình.</p>\n<p>Ngoài ra, việc sử dụng <strong>comment</strong> là điều cần thiết trong các dự án nhóm hoặc khi bạn muốn tài liệu hóa code. Tôi thường dùng <strong>comment một dòng</strong> để chú thích nhanh, và <strong>comment nhiều dòng</strong> để giải thích các phần code phức tạp.</p>\n<div class=\"contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950\">\n<div dir=\"ltr\"> </div>\n<div dir=\"ltr\"> </div>\n<h1 dir=\"ltr\">Ví dụ minh họa:</h1>\n<h1 dir=\"ltr\">1. Sử dụng biến và kiểu dữ liệu:</h1>\n<div class=\"overflow-y-auto p-4\" dir=\"ltr\">// Chọn đúng từ khóa khai báo<br>const pi = 3.14;         // const: giá trị không đổi<br>let radius = 5;          // let: có thể cập nhật<br>let area = pi * radius ** 2; <br><br>console.log(`Diện tích hình tròn: ${area}`); // Kết quả: 78.5</div>\n<div dir=\"ltr\"> </div>\n<h2 dir=\"ltr\">2. Sự quan trọng của ép kiểu:</h2>\n<p><span class=\"hljs-keyword\">let</span> strNum = <span class=\"hljs-string\">\"123\"</span>;</p>\n<p><span class=\"hljs-keyword\">let</span> num = <span class=\"hljs-number\">456</span>;</p>\n<p><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(strNum + num); <span class=\"hljs-comment\">// \"123456\" (nối chuỗi, không phải cộng số)</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Number</span>(strNum) + num); <span class=\"hljs-comment\">// 579 (ép kiểu đúng cách)</span></p>\n<p> </p>\n<p><br>Tên của các biến trong JavaScript có thể là hầu như bất kỳ chuỗi ký tự nào. Tuy nhiên, có một tập hợp các từ dành riêng không thể được sử dụng để đặt tên cho các biến, hàm hoặc bất kỳ thứ gì khác. Chúng là các phần không thể thiếu của ngôn ngữ và được gán ý nghĩa không thể thay đổi. Dưới đây bạn sẽ tìm thấy danh sách các từ đó.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://hvo153.github.io/blog-page/media/posts/8/8-2.PNG\" alt=\"\" width=\"1030\" height=\"659\" sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://hvo153.github.io/blog-page/media/posts/8/responsive/8-2-xs.PNG 320w ,https://hvo153.github.io/blog-page/media/posts/8/responsive/8-2-sm.PNG 480w ,https://hvo153.github.io/blog-page/media/posts/8/responsive/8-2-md.PNG 768w ,https://hvo153.github.io/blog-page/media/posts/8/responsive/8-2-xl.PNG 1024w\"></figure>\n</div>",
            "image": "https://hvo153.github.io/blog-page/media/posts/8/12.png",
            "author": {
                "name": "Võ Hồng Hải"
            },
            "tags": [
                   "BLOGS"
            ],
            "date_published": "2024-12-29T22:40:59+07:00",
            "date_modified": "2024-12-29T22:59:52+07:00"
        },
        {
            "id": "https://hvo153.github.io/blog-page/bai-dang-1.html",
            "url": "https://hvo153.github.io/blog-page/bai-dang-1.html",
            "title": "Giới thiệu về JavaScript",
            "summary": "JavaScript là gì? JavaScript viết tắt là JS à ngôn ngữ lập trình phổ&hellip;",
            "content_html": "<h2 id=\"javascript-la-gi\" class=\"wp-block-heading ftwp-heading\">JavaScript là gì?</h2>\n<p class=\"align-left\">JavaScript viết tắt là JS à <a class=\"rank-math-link\" href=\"https://vietnix.vn/ngon-ngu-lap-trinh/\">ngôn ngữ lập trình</a> phổ biến dùng để tạo ra các trang web tương tác. Được tích hợp và nhúng vào <a href=\"https://vietnix.vn/html-la-gi/\" target=\"_blank\" rel=\"noreferrer noopener\">HTML</a> giúp website trở nên sống động hơn. JavaScript đóng vai trò như một phần của trang web, thực thi cho phép Client-Side Script từ phía người dùng cũng như phía máy chủ (<a href=\"https://vietnix.vn/nodejs-la-gi/\" target=\"_blank\" rel=\"noreferrer noopener\">Nodejs</a>) tạo ra các trang web động.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://hvo153.github.io/blog-page/media/posts/6/5.PNG\" alt=\"\" width=\"683\" height=\"312\" sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://hvo153.github.io/blog-page/media/posts/6/responsive/5-xs.PNG 320w ,https://hvo153.github.io/blog-page/media/posts/6/responsive/5-sm.PNG 480w ,https://hvo153.github.io/blog-page/media/posts/6/responsive/5-md.PNG 768w ,https://hvo153.github.io/blog-page/media/posts/6/responsive/5-xl.PNG 1024w\"></figure>\n<p class=\"align-left\">JavaScript là một ngôn ngữ lập trình thông dịch với khả năng hướng đến đối tượng. Là một trong 3 ngôn ngữ chính trong lập trình web và có mối liên hệ lẫn nhau để xây dựng một website sống động, chuyên nghiệp, bạn có thể nhìn tổng quan như sau:</p>\n<ul class=\"wp-block-list\">\n<li><strong>HTML</strong>: Cung cấp cấu trúc cơ bản, hỗ trợ trong việc xây dựng layout, thêm nội dung dễ dàng trên website.</li>\n<li><strong><a href=\"https://vietnix.vn/css-la-gi/\" target=\"_blank\" rel=\"noreferrer noopener\">CSS</a></strong>: Được sử dụng để kiểm soát và hỗ trợ việc định dạng thiết kế, bố cục, style, màu sắc,…</li>\n<li><strong>JavaScript</strong>: Tạo nên những nội dung “động” trên website.</li>\n</ul>",
            "image": "https://hvo153.github.io/blog-page/media/posts/6/6.PNG",
            "author": {
                "name": "Võ Hồng Hải"
            },
            "tags": [
                   "BLOGS"
            ],
            "date_published": "2024-12-29T21:43:15+07:00",
            "date_modified": "2024-12-29T22:18:53+07:00"
        }
    ]
}
